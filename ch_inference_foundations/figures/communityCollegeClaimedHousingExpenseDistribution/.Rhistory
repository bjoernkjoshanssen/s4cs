#===> adjust shortSelling or Rf <===##
sm1SIM  <- stockModel(gr1, model='SIM', index=25, Rf=0.03/12, shortSelling=FALSE)#
 # defaults:#
 #    Rf = 0#
 #    shortSelling = TRUE#
#
#===> identify the optimal portfolio <===##
op1 <- optimalPort(sm1SIM)#
points(op1, optPortOnly=TRUE)
points(op1, optPortOnly=TRUE, col='#888888')
sm1 <- stockModel(gr1, model='SIM', index=25)#
op1 <- optimalPort(sm1)#
plot(op1, ylim=c(-0.015, 0.05))#
portPossCurve(sm1, riskRange=5, add=TRUE)
#===> adjust shortSelling or Rf <===##
sm1SIM  <- stockModel(gr1, model='SIM', index=25, Rf=0.03/12, shortSelling=FALSE)#
 # defaults:#
 #    Rf = 0#
 #    shortSelling = TRUE#
#
#===> identify the optimal portfolio <===##
op1 <- optimalPort(sm1SIM)#
points(op1, optPortOnly=TRUE, col='#888888')
sm1 <- stockModel(gr1, model='SIM', index=25)#
op1 <- optimalPort(sm1)#
plot(op1, ylim=c(-0.015, 0.05))#
portPossCurve(sm1, riskRange=5, add=TRUE)
#===> adjust shortSelling or Rf <===##
sm1SIM  <- stockModel(gr1, model='SIM', index=25, Rf=0.03/12, shortSelling=FALSE)#
 # defaults:#
 #    Rf = 0#
 #    shortSelling = TRUE#
#
#===> identify the optimal portfolio <===##
op1 <- optimalPort(sm1SIM)#
points(op1, optPortOnly=TRUE, col='#888888')
points(op1, optPortOnly=TRUE, colOP='#888888', cex=2)
#===> simple model building <===##
sm1None <- stockModel(gr1, drop=25) # drop index#
#
#===> customize to particular model#
sm1SIM  <- stockModel(gr1, model='SIM', index=25)#
sm1CCM  <- stockModel(gr1, model='CCM', drop=25)#
sm1MGM  <- stockModel(gr1, model='MGM', drop=25, industry=ind)#
#
#===> adjust shortSelling or Rf <===##
sm1SIM1 <- stockModel(gr1, model='SIM', index=25, Rf=0.03/12, shortSelling=FALSE)#
 # defaults:#
 #    Rf = 0#
 #    shortSelling = TRUE#
#
#===> identify the optimal portfolio <===##
op11 <- optimalPort(sm1SIM1)#
points(op11, optPortOnly=TRUE, colOP='#888888', cex=2)#
#
#===> try it on your own <===##
#
#
#===> using Blume or Vasicek <===##
gr2 <- getReturns(ticker, start='2004-12-31', end='2009-12-31')#
sm2SIM <- stockModel(gr2, model='SIM', index=25)#
newSIM <- adjustBeta(sm1SIM, sm2SIM) # default method is "Blume"#
op2SIM <- optimalPort(sm2SIM)#
op2NEW <- optimalPort(newSIM)#
plot(op2SIM)#
points(op2NEW, colOP='#888888')#
optimalPort(newSIM)
op2SIM
op2NEW
plot(op2SIM, ylim=c(-0.03, 0.12))#
points(op2NEW, colOP='#888888')
par(mfrow=1:2)#
plot(op2SIM, xlim=c(0, 0.25), ylim=c(-0.03, 0.12))#
plot(op2NEW, xlim=c(0, 0.25), ylim=c(-0.03, 0.12))
par(mfrow=1:2)#
plot(op2SIM, xlim=c(0, 0.25), ylim=c(-0.03, 0.12))#
portPossCurve(sm2SIM)#
plot(op2NEW, xlim=c(0, 0.25), ylim=c(-0.03, 0.12))#
portPossCurve(sm2NEW)
par(mfrow=1:2)#
plot(op2SIM, xlim=c(0, 0.25), ylim=c(-0.03, 0.12))#
portPossCurve(sm2SIM, add=TRUE)#
plot(op2NEW, xlim=c(0, 0.25), ylim=c(-0.03, 0.12))#
portPossCurve(sm2NEW, add=TRUE)
par(mfrow=1:2)#
plot(op2SIM, xlim=c(0, 0.25), ylim=c(-0.03, 0.12))#
portPossCurve(sm2SIM, add=TRUE)#
plot(op2NEW, xlim=c(0, 0.25), ylim=c(-0.03, 0.12))#
portPossCurve(newSM, add=TRUE)
portPossCurve(newSIM, add=TRUE)
par(mfrow=1:2)#
plot(op2SIM, xlim=c(0, 0.25), ylim=c(-0.03, 0.12))#
portPossCurve(sm2SIM, add=TRUE, riskRange=10)#
plot(op2NEW, xlim=c(0, 0.25), ylim=c(-0.03, 0.12))#
portPossCurve(newSIM, add=TRUE, riskRange=10)
simVas <- adjustBeta(sm2SIM, method='V') # default method is
simVas
sm2SIM <- stockModel(gr2, model='SIM', index=25)#
simBlu <- adjustBeta(sm1SIM, sm2SIM) # default method is "Blume"#
simVas <- adjustBeta(sm2SIM, method='V') # default method is "Blume"#
op2SIM <- optimalPort(sm2SIM)#
op2Blu <- optimalPort(simBlu)#
op2Vas <- optimalPort(simVas)#
par(mfrow=c(1,3))#
plot(op2SIM, xlim=c(0, 0.25), ylim=c(-0.03, 0.12))#
portPossCurve(sm2SIM, add=TRUE, riskRange=10)#
plot(op2Blu, xlim=c(0, 0.25), ylim=c(-0.03, 0.12))#
portPossCurve(simBlu, add=TRUE, riskRange=10)#
plot(op2Vas, xlim=c(0, 0.25), ylim=c(-0.03, 0.12))#
portPossCurve(simVas, add=TRUE, riskRange=10)
library(ppMeasures)
?stDist
data(pattEx1)#
x <- pattEx1[pattEx1[,1] == 1,2]#
y <- pattEx1[pattEx1[,1] == 2,2]#
(hold1 <- stDist(x, y, 4))#
summary(hold1)#
plot(hold1)
data(pattEx2)#
x <- pattEx2[pattEx1[,1] == 1,c(2,3)]#
y <- pattEx2[pattEx1[,1] == 2,c(2,3)]#
(hold2 <- stDist(x, y, 2))#
summary(hold2)#
plot(hold2)
match(c(1,3,5), 1:5)
match(c('a','c'), c('a', 'b', 'c', 'd'))
data(collEx1)#
(ppc1 <- ppColl(collEx1[,2], collEx1[,1]))#
summary(ppc1)#
plot(ppc1, ylim=c(-3, ppc1$keyMax+3))#
hold1 <- ppPrototype(ppc1, pm=0.5)#
points(hold1, pch=20, cex=3, col='#FF000088')
data(collEx2)#
(ppc2 <- ppColl(collEx2[,2:3], collEx2[,1]))#
summary(ppc2)#
plot(ppc2, cex=0.5)#
hold2 <- ppPrototype(ppc2, pm=0.05)#
points(hold2, pch=20, cex=3, col='#FF000088')
#===> one dimensional example <===##
data(collEx1)#
ppc   <- ppColl(collEx1[,2], collEx1[,1])#
plot(ppc, ylim=c(-3, 28))#
protoVP <- ppPrototype(ppc, 0.5, alg='VP97')#
points(protoVP, pch=20, cex=2, col='#FF000088')#
protoMP <- ppPrototype(ppc, 0.5)#
points(protoMP, pch=20, cex=2, col='#00FF0088', at=-1)#
protoKP <- ppPrototype(ppc, 0.5, alg='kernPT', ppd=500)#
points(protoKP, pch=20, cex=2, col='#0000FF88', at=-2)
summary(protoVP)
#===> two dimensional example <===##
data(collEx2)#
ppc   <- ppColl(collEx2[,2:3], collEx2[,1])#
plot(ppc)#
protoMP <- ppPrototype(ppc, 0.1)#
points(protoMP, pch=20, cex=3.5, col='#FF000088')
#===> one dimensional example <===##
data(collEx1)#
ppc   <- ppColl(collEx1[,2], collEx1[,1])#
plot(ppc, ylim=c(-3, 28))#
protoVP <- ppPrototype(ppc, 0.5, alg='VP97')#
summary(protoVP)#
points(protoVP, pch=20, cex=2, col='#FF000088')#
protoMP <- ppPrototype(ppc, 0.5)#
points(protoMP, pch=20, cex=2, col='#00FF0088', at=-1)#
protoKP <- ppPrototype(ppc, 0.5, alg='kernPT', ppd=500)#
points(protoKP, pch=20, cex=2, col='#0000FF88', at=-2)
protoSP <- ppPrototype(ppc, 0.5, alg='MSU', ppd=500)#
points(protoSP, pch=20, cex=2, col='#FFFF0088', at=-3)
protoSP <- ppPrototype(ppc, 0.5, alg='MSU', ppd=500, bypassCheck=TRUE)#
points(protoSP, pch=20, cex=2, col='#FFFF0088', at=-3)
data(pattEx1)#
x <- pattEx1[pattEx1[,1] == 1,2]#
y <- pattEx1[pattEx1[,1] == 2,2]#
(hold1  <- stDist(x, y, 4))#
(hold11 <- stDist(x, y, 4, alg='MSU'))#
summary(hold1)#
plot(hold1)
summary(hold1)#
summary(hold11)
plot(hold11)
hold1
summary(hold1)
plot(hold1)
points(hold1)
points.stDist
points.stdist
protoMP
summary(protoMP)
plot(protoMP)
points(protoMP)
plot.ppPrototype <-#
function(x, xlim=NULL, ylim=NULL, pch=1, col=1, cex=1, yPos=NULL, Dims=1:2, xlab=NULL, ylab=NULL, ...){#
	if(x$dim >= 2){#
		hold           <- x#
		hold$prototype <- x$prototype[,Dims[1:2]]#
		hold$dim       <- 2#
		x              <- hold#
		if(is.null(xlab)[1]){#
			xlab <- paste('dim', Dims[1])#
		}#
		if(is.null(ylab)[1]){#
			ylab <- paste('dim', Dims[2])#
		}#
		if(is.null(xlim)[1]){#
			xlim <- range(x$prototype[,1])#
		}#
		if(is.null(ylim)[1]){#
			ylim <- range(x$prototype[,2])#
		}#
		plot(x$prototype[,1], x$prototype[,2], col=col, pch=pch, cex=cex, xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, ...)#
	} else {#
		if(is.null(xlab)[1]){#
			xlab <- paste('dimension', Dims[1])#
		}#
		if(is.null(ylab)[1]){#
			ylab <- ''#
		}#
		if(is.null(xlim)[1]){#
			xlim <- range(x$prototype[,1])#
		}#
		if(is.null(yPos[1])){#
			yPos <- rep(0, dim(x$prototype)[1])#
		} else if(length(yPos) == 1){#
			yPos <- rep(yPos, dim(x$prototype)[1])#
		}#
		if(is.null(ylim)[1]){#
			ylim <- yPos[1] + 0.5*c(-1,1)#
		}#
		plot(x$prototype[,Dims[1]], yPos, col=col, pch=pch, cex=cex, xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, ...)#
	}#
}
plot(protoMP)
points(protoMP)
ppc
summary(ppc)
plot(ppc)
points(ppc)
points.ppColl <-#
function(x, pch='default', cex='propToWts', col='default', Dims=1:2, ...){#
	if(x$dim > 2){#
		hold     <- x#
		if(length(Dims) > 1){#
			hold$points <- x$points[,Dims[1:2]]#
			hold$dim    <- 2#
		} else {#
			hold$points <- matrix(x$points[,Dims[1]], ncol=1)#
			hold$dim    <- 1#
		}#
		x <- hold#
	}#
	if(pch[1] == 'default'){#
		if(x$dim == 1){#
			pch <- 20#
		} else {#
			pch <- x$key#
			pch <- ((pch-1) %% 25)+1#
		}#
	} else if(length(pch) == x$keyMax){#
		pch <- pch[x$key]#
	} else {#
		pch <- rep(pch, length(x$key))#
	}#
	if(col[1] == 'default'){#
		if(x$dim == 1){#
			col <- '#00000088'#
		} else {#
			col <- x$key#
		}#
	} else if(length(col) == x$keyMax){#
		col <- col[x$key]#
	} else {#
		col <- rep(col, length(x$key))#
	}#
	if(cex[1] == 'propToWts'){#
		cex <- x$wts[x$key]/min(x$wts[x$key])*0.7#
	} else if(length(cex) < x$keyMax){#
		cex <- rep(cex, length(x$key))#
	} else if(length(cex) == x$keyMax){#
		cex <- cex[x$key]#
	}#
	if(x$dim == 1 || length(Dims) == 1){#
		if(x$dim == 1){#
			Dims <- 1#
		}#
		points(x$points[,Dims], x$key, pch=pch, cex=cex, col=col, ...)#
	} else {#
		points(x$points[,1:2], pch=pch, cex=cex, col=col, ...)#
	}#
	nLeft <- x$keyMax - length(unique(x$key))#
	if(nLeft > 0){#
		cat('Number of patterns with no points:',#
			nLeft, '\n')#
	}#
}
points(ppc)
plot(ppc)
points(ppc)
?collEx1
data(collEx1)#
#
#===> construct the collection <===##
ppc   <- ppColl(collEx1[,2], collEx1[,1])#
plot(ppc, ylim=c(-3, 28))#
#
#===> compute the prototype using VP97 <===##
protoVP <- ppPrototype(ppc, 0.5, alg='VP97')#
points(protoVP, pch=20, cex=2, col='#FF000088')#
#
#===>compute the prototype using margPT <===##
protoMP <- ppPrototype(ppc, 0.5)#
points(protoMP, pch=20, cex=2, col='#00FF0088', at=-1)#
# both algorithms produce very similar results
?collEx2
data(collEx2)#
#
#===> construct the collection <===##
ppc   <- ppColl(collEx2[,2:3], collEx2[,1])#
plot(ppc)#
#
#===>compute the prototype via use margPT <===##
protoMP <- ppPrototype(ppc, 0.1)#
points(protoMP, pch=20, cex=3.5, col='#FF000088')#
# both algorithms produce very similar results
data(collEx1)#
#
#===> construct the collection <===##
ppc   <- ppColl(collEx1[,2], collEx1[,1])#
plot(ppc, ylim=c(-3, 28))#
#
#===> compute the prototype using VP97 <===##
protoVP <- ppPrototype(ppc, 0.5, alg='VP97')#
points(protoVP, pch=20, cex=2, col='#FF000088')#
#
#===>compute the prototype using margPT <===##
protoMP <- ppPrototype(ppc, 0.5)#
points(protoMP, pch=20, cex=2, col='#00FF0088', at=-1)#
# both algorithms produce very similar results
data(collEx2)#
#
#===> construct the collection <===##
ppc   <- ppColl(collEx2[,2:3], collEx2[,1])#
plot(ppc)#
#
#===>compute the prototype via use margPT <===##
protoMP <- ppPrototype(ppc, 0.1)#
points(protoMP, pch=20, cex=3.5, col='#FF000088')#
# both algorithms produce very similar results
?pattEx1
data(pattEx1)#
#
#===> obtain the patterns <===##
x <- pattEx1[pattEx1[,1] == 1,2]#
y <- pattEx1[pattEx1[,1] == 2,2]#
par(mfrow=1:2)#
#
#===> compute distance via VP97 <===##
(dVP <- stDist(x, y, 0.5, alg='VP97'))#
plot(dVP)#
#
#===> compute distance via IMA <===##
(dIMA <- stDist(x, y, 0.5, alg='IMA'))#
plot(dIMA)
#===> compute distance via MSU <===##
(dMSU <- stDist(x, y, 0.5, alg='MSU'))
summary(dMSU)
?pattEx2
data(pattEx2)#
#
#===> obtain the patterns <===##
x <- pattEx2[pattEx2[,1] == 1,2:3]#
y <- pattEx2[pattEx2[,1] == 2,2:3]#
#
#===> compute distance (via IMA) <===##
(d <- stDist(x, y, 0.5))#
plot(d)
summary(d)
?neurNaive
data(neurNaive)#
#
#===> construct weights <===##
# wts found separately#
counts <- c(3,1,3,5)#
wtsKey <- 1:268#
# cat information from original data#
cats   <- c(rep(1,66), rep(2,39), rep(3,80), rep(4,83))#
for(i in 1:4){#
	these <- unique(neurNaive[neurNaive[,3] == i,1])#
	counts[i] <- counts[i] + length(these)#
}#
sum(counts)#
wts <- 1/counts[cats]#
#
#===> setup collection <===##
pts <- neurNaive[,2]#
key <- neurNaive[,1]#
ppc <- ppColl(pts, key, wts, wtsKey)#
#
#===> identify prototype <===##
(protoKP <- ppPrototype(ppc, 0.0106, pa=1.1, pd=0.9, alg='kernPT', ppd=5000, bypassCheck=TRUE))
points(protoKP)
plot(ppc)
points(protoKP)
plot(ppc)#
points(protoKP, col=4, cex=1.5, at=-10)
range(ppc$points)
?neurCond
data(neurCond)#
#
#===> construct weights <===##
# wts found separately#
counts <- c(6,4,15,5,5)#
wtsKey <- 1:256#
# cat information from original data#
cats   <- c(rep(1,29), rep(2,55), rep(3,31), rep(4,16),#
		rep(3,54), rep(5,44), rep(3,27))#
for(i in 1:5){#
	these <- unique(neurCond[neurCond[,3] == i,1])#
	counts[i] <- counts[i] + length(these)#
}#
sum(counts)#
wts <- 1/counts[cats]#
#
#===> setup collection <===##
pts <- neurCond[,2]#
key <- neurCond[,1]#
ppc <- ppColl(pts, key, wts, wtsKey)#
# did not need to list nMissing since implied through wts/wtsKey#
#
#===> identify prototype <===##
(protoKP <- ppPrototype(ppc, 0.0075, pa=1.1125, pd=0.8875, alg='kernPT', ppd=5000, bypassCheck=TRUE))#
plot(ppc)#
points(protoKP, col=4, cex=1.5, at=-10)
data(neurBd)#
#
#===> construct weights <===##
# wts found separately#
counts <- c(0,1,5)#
wtsKey <- 1:78#
# cat information from original data#
cats   <- c(rep(1,22), rep(2,6), rep(3,50))#
for(i in 1:3){#
	these <- unique(neurBd[neurBd[,3] == i,1])#
	counts[i] <- counts[i] + length(these)#
}#
sum(counts)#
wts <- 1/counts[cats]#
#
#===> setup collection <===##
pts <- neurBd[,2]#
key <- neurBd[,1]#
ppc <- ppColl(pts, key, wts, wtsKey)#
#
#===> identify prototype <===##
(protoKP <- ppPrototype(ppc, 0.0078, pa=1.125, pd=0.885, alg='kernPT', ppd=5000, bypassCheck=TRUE))#
plot(ppc)#
points(protoKP, col=4, cex=1.5, at=-10)
plot(ppc)#
points(protoKP, col=4, cex=1.5, at=-5)
?neurBd
points.ppColl <-#
function(x, pch='default', cex='propToWts', col='default', Dims=1:2, ...){#
	if(x$dim > 2){#
		hold     <- x#
		if(length(Dims) > 1){#
			hold$points <- x$points[,Dims[1:2]]#
			hold$dim    <- 2#
		} else {#
			hold$points <- matrix(x$points[,Dims[1]], ncol=1)#
			hold$dim    <- 1#
		}#
		x <- hold#
	}#
	if(pch[1] == 'default'){#
		if(x$dim == 1){#
			pch <- 20#
		} else {#
			pch <- x$key#
			pch <- ((pch-1) %% 25)+1#
		}#
	} else if(length(pch) == x$keyMax){#
		pch <- pch[x$key]#
	} else {#
		pch <- rep(pch, length(x$key))#
	}#
	if(col[1] == 'default'){#
		if(x$dim == 1){#
			col <- '#00000088'#
		} else {#
			col <- x$key#
		}#
	} else if(length(col) == x$keyMax){#
		col <- col[x$key]#
	} else {#
		col <- rep(col, length(x$key))#
	}#
	if(cex[1] == 'propToWts'){#
		cex <- sqrt(x$wts[x$key]/min(x$wts[x$key])*0.7)#
	} else if(length(cex) < x$keyMax){#
		cex <- rep(cex, length(x$key))#
	} else if(length(cex) == x$keyMax){#
		cex <- cex[x$key]#
	}#
	if(x$dim == 1 || length(Dims) == 1){#
		if(x$dim == 1){#
			Dims <- 1#
		}#
		points(x$points[,Dims], x$key, pch=pch, cex=cex, col=col, ...)#
	} else {#
		points(x$points[,1:2], pch=pch, cex=cex, col=col, ...)#
	}#
	nLeft <- x$keyMax - length(unique(x$key))#
	if(nLeft > 0){#
		cat('Number of patterns with no points:',#
			nLeft, '\n')#
	}#
}
plot.ppColl <-#
function(x, pch='default', cex='propToWts', col='default', xlab=NULL, ylab=NULL, Dims=1:2, ylim=NULL, addLines=FALSE, ...){#
	if(x$dim > 2){#
		hold     <- x#
		if(length(Dims) > 1){#
			hold$points <- x$points[,Dims[1:2]]#
			hold$dim    <- 2#
		} else {#
			hold$points <- matrix(x$points[,Dims[1]], ncol=1)#
			hold$dim    <- 1#
		}#
		x <- hold#
	}#
	if(pch[1] == 'default'){#
		if(x$dim == 1){#
			pch <- 20#
		} else {#
			pch <- x$key#
			pch <- ((pch-1) %% 25)+1#
		}#
	} else if(length(pch) == x$keyMax){#
		pch <- pch[x$key]#
	} else {#
		pch <- rep(pch, length(x$key))#
	}#
	if(col[1] == 'default'){#
		if(x$dim == 1){#
			col <- '#00000088'#
		} else {#
			col <- x$key#
		}#
	} else if(length(col) == x$keyMax){#
		col <- col[x$key]#
	} else {#
		col <- rep(col, length(x$key))#
	}#
	if(cex[1] == 'propToWts'){#
		cex <- sqrt(x$wts[x$key]/min(x$wts[x$key])*0.7)#
	} else if(length(cex) < x$keyMax){#
		cex <- rep(cex, length(x$key))#
	} else if(length(cex) == x$keyMax){#
		cex <- cex[x$key]#
	}#
	if(x$dim == 1){#
		if(is.null(xlab)[1]){#
			xlab <- paste('dimension', Dims[1])#
		}#
		if(is.null(ylab)[1]){#
			ylab <- 'pattern'#
		}#
		if(is.null(ylim[1])){#
			R <- range(x$key)#
			ylim <- R + c(-1,1)*diff(R)/10#
		}#
		plot(x$points[,1], x$key, pch=pch, cex=cex, col=col, xlab=xlab, ylab=ylab, ylim=ylim, ...)#
		if(addLines[1]){#
			abline(h=0:x$keyMax, col='#00000033')#
			abline(h=seq(0,x$keyMax,5), col='#00000066')#
		}#
	} else {#
		if(is.null(xlab)[1]){#
			xlab <- paste('dim', Dims[1])#
		}#
		if(is.null(ylab)[1]){#
			ylab <- paste('dim', Dims[2])#
		}#
		plot(x$points[,Dims[1:2]], pch=pch, cex=cex, col=col, xlab=xlab, ylab=ylab, ylim=ylim, ...)#
	}#
	nLeft <- x$keyMax - length(unique(x$key))#
	if(nLeft > 0){#
		cat('Number of patterns with no points:',#
			nLeft, '\n')#
	}#
}
data(neurBd)#
#
#===> construct weights <===##
# wts found separately#
counts <- c(0,1,5)#
wtsKey <- 1:78#
# cat information from original data#
cats   <- c(rep(1,22), rep(2,6), rep(3,50))#
for(i in 1:3){#
	these <- unique(neurBd[neurBd[,3] == i,1])#
	counts[i] <- counts[i] + length(these)#
}#
sum(counts)#
wts <- 1/counts[cats]#
#
#===> setup collection <===##
pts <- neurBd[,2]#
key <- neurBd[,1]#
ppc <- ppColl(pts, key, wts, wtsKey)#
#
#===> identify prototype <===##
(protoKP <- ppPrototype(ppc, 0.0078, pa=1.125, pd=0.885, alg='kernPT', ppd=5000, bypassCheck=TRUE))#
plot(ppc)#
points(protoKP, col=4, cex=1.5, at=-5)
?neurCond
data(neurCond)#
#
#===> construct weights <===##
# wts found separately#
counts <- c(6,4,15,5,5)#
wtsKey <- 1:256#
# cat information from original data#
cats   <- c(rep(1,29), rep(2,55), rep(3,31), rep(4,16),#
		rep(3,54), rep(5,44), rep(3,27))#
for(i in 1:5){#
	these <- unique(neurCond[neurCond[,3] == i,1])#
	counts[i] <- counts[i] + length(these)#
}#
sum(counts)#
wts <- 1/counts[cats]#
#
#===> setup collection <===##
pts <- neurCond[,2]#
key <- neurCond[,1]#
ppc <- ppColl(pts, key, wts, wtsKey)#
# did not need to list nMissing since implied through wts/wtsKey#
#
#===> identify prototype <===##
(protoKP <- ppPrototype(ppc, 0.0075, pa=1.1125, pd=0.8875, alg='kernPT', ppd=5000, bypassCheck=TRUE))#
plot(ppc)#
points(protoKP, col=4, cex=1.5, at=-10)
#===> construct weights <===##
# wts found separately#
counts <- c(3,1,3,5)#
wtsKey <- 1:268#
# cat information from original data#
cats   <- c(rep(1,66), rep(2,39), rep(3,80), rep(4,83))#
for(i in 1:4){#
	these <- unique(neurNaive[neurNaive[,3] == i,1])#
	counts[i] <- counts[i] + length(these)#
}#
sum(counts)#
wts <- 1/counts[cats]#
#
#===> setup collection <===##
pts <- neurNaive[,2]#
key <- neurNaive[,1]#
ppc <- ppColl(pts, key, wts, wtsKey)#
#
#===> identify prototype <===##
(protoKP <- ppPrototype(ppc, 0.0106, pa=1.1, pd=0.9, alg='kernPT', ppd=5000, bypassCheck=TRUE))#
plot(ppc)#
points(protoKP, col=4, cex=1.5, at=-10)
library(ppMeasures)
?stDist
library(help=ppMeasures)
.024/sqrt(.016*0.984/1731)
.014/sqrt(.016*0.984/1731)
qnorm(.01)
qnorm(.99)
(.05 / 2.33)^2
.5/(.05 / 2.33)^2
2.33*sqrt(.5*.5/1086)
.25/(.05 / 2.33)^2
2.33*sqrt(.5*.5/543)
.25/(.03 / 2.33)^2
30/220
46/220
sqrt(.136*.864/220)
(.209-.136)/.023
sqrt(.016*0.984/1731)
pnorm(-3.17)
1731*.016
.65/sqrt(50
)
.35/.092
4.58/5
431/932 - 377/937
p <- 102/908
p
sqrt(p*(1-p)/908)
p + c(-1,1)*1.96*sqrt(p*(1-p)/908)
(98.6-98.25)/.63
pnorm(-.56)
.63/sqrt(50)
(98.6-98.25)/(.63/sqrt(50))
4.58/5
431/932 - 377/937
(.04/1.96)^2
.55*.45/(.04/1.96)^2
par(mfrow=c(2,3), mar=c(3,3,1,1))#
normTail(L=-2)#
normTail(U=1)#
normTail(M=c(-2,-0.3), col='#22558833')
library(openintro)
par(mfrow=c(2,3), mar=c(3,3,1,1))#
normTail(L=-2)#
normTail(U=1)#
normTail(M=c(-2,-0.3), col='#22558833')
par(mfrow=c(2,3), mar=c(3,3,1,1))#
normTail(L=-2)#
normTail(U=1, axes=3)#
normTail(M=c(-2,-0.3), col='#22558833')
par(mfrow=c(2,3), mar=c(3,3,1,1))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')
par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.7, 0.6, 0))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')
normTail(5, 13, L=0, M=1:2, U=12)
normTail(5, 13, L=-5, M=1:2, U=12)
normTail(5, 13, L=-5, M=c(0,3, U=12)
)
normTail(5, 13, L=-5, M=c(0,3), U=12)
normTail()
par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.7, 0.7, 0))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')#
normTail(5, 13, L=-5, M=c(0,3), U=12, axesIncr=2)#
normTail(102, 4, xlim=c(-2,2), M=c(100,103))
par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.7, 0.7, 0))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')#
normTail(5, 13, L=-5, M=c(0,3), U=12, axesIncr=2)#
normTail(102, 4, xlim=c(-97,110), M=c(100,103))
par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.7, 0.7, 0))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')#
normTail(5, 13, L=-5, M=c(0,3), U=12, axesIncr=2)#
normTail(102, 4, xlim=c(97,110), M=c(100,103))
normTail(par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.7, 0.7, 0))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')#
normTail(5, 13, L=-5, M=c(0,3), U=12, xAxisIncr=2)#
normTail(102, 4, xlim=c(97,110), M=c(100,103))
par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.7, 0.7, 0))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')#
normTail(5, 13, L=-5, M=c(0,3), U=12, xAxisIncr=2)#
normTail(102, 4, xlim=c(97,110), M=c(100,103))
normTail(-10, 10, M=c(0,15))
normTail(-10.0, 5.192, M=c(-5,2), digis=2)
normTail(-10.0, 5.192, M=c(-5,2), digis=3)
normTail(-10.0, 5.192, M=c(-5,2), digis=1)
normTail(-10.0, 5.192, M=c(-5,2), digits=1)
normTail(-10.0, 5.192, M=c(-5,2), digits=2)
normTail(-10.0, 5.192, M=c(-5,2), digits=3)
normTail(-10.0, 5.192, M=c(-5,2), digits=1)
par(mfrow=c(2,3), mar=c(3,3,1,1), mgp=c(1.7, 0.7, 0))#
normTail(L=-2)#
normTail(U=1, xLab='symbol', cex.axis=0.7)#
normTail(M=c(-2,-0.3), col='#22558833')#
normTail(5, 13, L=-5, M=c(0,3), U=12, xAxisIncr=2)#
normTail(102, 4, xlim=c(97,110), M=c(100,103))#
normTail(-10.0, 5.192, M=c(-5,2), digits=1, xAxisIncr=2)
data(textbooks)#
histPlot(textbooks$diff, axes=FALSE)
x <- textbooks$diff#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=4, nMax=6)
par(mfrow=c(2,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=4, nMax=6)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=6, nMin=5, nMax=8)
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=6, nMin=5, nMax=7)
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=6, nMin=5, nMax=6)
x <- textbooks$diff#
par(mfrow=c(2,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=4, nMax=6)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=5, nMax=5)
par(mfrow=c(3,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=4, nMin=4, nMax=4)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=5, nMax=5)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=6, nMin=6, nMax=6)
x <- textbooks$diff#
par(mfrow=c(3,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=4, nMin=4, nMax=4)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=5, nMax=5)#
histPlot(x, axes=FALSE)#
# no decent axis works with exactly six labels:#
buildAxis(1, x, n=6, nMin=6, nMax=6)#
buildAxis(1, x, n=6, nMin=6, nMax=7)
x <- textbooks$diff#
par(mfrow=c(3,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=4, nMin=4, nMax=4)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=5, nMax=5)#
histPlot(x, axes=FALSE)#
# no decent axis works with exactly six labels#
buildAxis(1, x, n=6)
x <- textbooks$diff#
par(mfrow=c(3,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=4, nMin=4, nMax=4)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=5, nMax=5)#
histPlot(x, axes=FALSE)#
# no decent axis works with exactly six labels#
# no min or max specified, only a target number of labels:#
buildAxis(1, x, n=6)
buildAxis(1, x, n=5)
buildAxis(1, x, n=4)
x <- textbooks$diff#
par(mfrow=c(3,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=4, nMin=4, nMax=4)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=5, nMax=5)#
histPlot(x, axes=FALSE)#
# no decent axis works with exactly six labels#
# no min or max specified, only a target number of labels:#
buildAxis(1, x, n=4)
x <- textbooks$diff#
par(mfrow=c(3,1))#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=4, nMin=4, nMax=4)#
histPlot(x, axes=FALSE)#
buildAxis(1, x, n=5, nMin=5, nMax=5)#
histPlot(x, axes=FALSE)#
# no decent axis is found for this data with exactly six labels#
# no min or max specified, only a target number of labels:#
buildAxis(1, x, n=6)
library(openintro)
library(help=openintro)
?ballBearing
data(ballBearing)#
par(mfrow=c(1,2))#
histPlot(ballBearing$lifeSpan, col='#22558833')#
qqnorm(ballBearing$lifeSpan)
?boxPlot
?buildAxis
#===> 8 - repeat <===##
m <- runif(1)/runif(1) + rgamma(1, runif(1)/runif(1), runif(1)/runif(1))#
s <- rgamma(1, runif(1)/runif(1), runif(1)/runif(1))#
x <- rnorm(50, m, s)#
hist(x, axes=FALSE)#
buildAxis(1, limits=x, n=5, nMin=4, nMax=6, eps=10^-12)#
if(diff(range(x)) < 10^-12){#
	cat("too small\n")#
}
?census
data(census)#
str(census)#
these <- census[,3] > 0     # income greater than 0#
histPlot(log(census$totalFamilyIncome[these]))
?credits
data(credits)
credits[1:5,]
credits
histPlot(credits)
histPlot(credits$credits)
?gradesTV
data(gradesTV)#
str(gradesTV)#
plot(gradesTV)
?heartTr
data(heartTr)#
str(heartTr) #
boxPlot(heartTr$survtime, heartTr$transplant, ylab = 'Survival Time (days)')#
mosaicplot(~ transplant + survived, data = heartTr)
data(heartTr)#
str(heartTr) #
boxPlot(heartTr$survtime, heartTr$transplant, ylab = 'Survival Time (days)')
?ipod
ipod
data(ipod)
ipod
str(ipod)
data(ipod)#
histPlot(ipod$songLength)
?lmPlot
data(satGPA)#
lmPlot(satGPA$SATSum, satGPA$FYGPA)
?mammals
data(mammals)
str(mammals)
mammals[1:5,]
lmPlot(mammals$BodyWt, mammals$BrainWt)
lmPlot(log(mammals$BodyWt), log(mammals$BrainWt))
?marathon
data(marathon)#
str(marathon)#
histPlot(marathon$Time)
#
boxPlot(marathon$Time, horiz = TRUE, fact = marathon$Gender)
normTail
?normTail
par(mfrow=c(2,3), mar=c(3,3,1,1))#
normTail(3,2,5)#
normTail(3,2,1, xLab='symbol')#
normTail(3,2,M=1:2, xLab='symbol', cex.axis=0.8)#
normTail(3,2,U=5,axes=FALSE)#
normTail(L=-1, U=2, M=c(0,1), axes=3, xAxisIncr=2)#
normTail(L=-1, U=2, M=c(0,1), xLab='symbol', cex.axis=0.8, xAxisIncr=2)
?possum
?smoking
par(mfrow=c(2,2))
data(smoking)#
str(smoking)#
histPlot(smoking$amtWeekends)#
histPlot(smoking$amtWeekdays)#
table(smoking$smoke, smoking$gender)#
mosaicplot(~ smoke + maritalStatus, data = smoking)#
barplot(sort(table(smoking$maritalStatus), decreasing = TRUE))
?tips
1895 + 1895/2*11
2500/12
3200/4600
3200/4600*55000
3557/4583
3557/4583 - 5.3
3557/4583 - .053
.723*55
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 500, 200), exp(rnorm(10, log(500))))
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 500, 200), exp(rnorm(10, log(500))))#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1))#
histPlot(x)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 500, 200), exp(rnorm(10, log(500), 2)))#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1))#
histPlot(x)#
dev.off()
mean(x)
sd(x)
t.test(x, mu=650)
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 500, 200), exp(rnorm(10, log(500), 2.5)))#
t.test(x, mu=650)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1))#
histPlot(x)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 500, 100), exp(rnorm(10, log(500), 2.5)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
t.test(x, mu=650)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1))#
histPlot(x)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 500, 100), exp(rnorm(10, log(500), 2.1)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
t.test(x, mu=650)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1))#
histPlot(x)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 500, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
t.test(x, mu=650)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1))#
histPlot(x)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 550, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
t.test(x, mu=650)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1))#
histPlot(x)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 550, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
t.test(x, mu=650)#
mean(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1))#
histPlot(x)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 600, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
t.test(x, mu=650)#
mean(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1))#
histPlot(x)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 600, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
x[x < 900 & x > 850] <- x[x < 900 & x > 850] + 50#
t.test(x, mu=650)#
mean(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1))#
histPlot(x)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 600, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
x[x < 900 & x > 800] <- x[x < 900 & x > 800] + 50#
t.test(x, mu=650)#
mean(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1))#
histPlot(x)#
dev.off()
hist(x)
x < 900 & x > 800
x[x < 900 & x > 800] <- x[x < 900 & x > 800] + 100
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 600, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
x[x < 900 & x > 800] <- x[x < 900 & x > 800] + 100#
t.test(x, mu=650)#
mean(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1))#
histPlot(x)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 590, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
x[x < 900 & x > 800] <- x[x < 900 & x > 800] + 100#
t.test(x, mu=650)#
mean(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1))#
histPlot(x)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 596, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
x[x < 900 & x > 800] <- x[x < 900 & x > 800] + 100#
t.test(x, mu=650)#
mean(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1))#
histPlot(x)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 596, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
x[x < 900 & x > 800] <- x[x < 900 & x > 800] + 100#
t.test(x, mu=650)#
mean(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3, 1, 1), las=1, mgp=c(1.9, 0.7, 0))#
histPlot(x)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 596, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
x[x < 900 & x > 800] <- x[x < 900 & x > 800] + 100#
t.test(x, mu=650)#
mean(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3.5, 1, 1), las=1, mgp=c(1.9, 0.7, 0))#
histPlot(x, xlab='housing expense', ylab='')#
mtext('freqency', side=2, line=2.3)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 596, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
x[x < 900 & x > 800] <- x[x < 900 & x > 800] + 100#
t.test(x, mu=650)#
mean(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3.5, 1, 1), las=1, mgp=c(1.9, 0.7, 0))#
histPlot(x, xlab='housing expense', ylab='')#
par(las=0)#
mtext('freqency', side=2, line=2.3)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 596, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
x[x < 900 & x > 800] <- x[x < 900 & x > 800] + 100#
t.test(x, mu=650)#
mean(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3.5, 1, 1), las=1, mgp=c(1.9, 0.7, 0))#
histPlot(x, xlab='housing expense', ylab='')#
#par(las=0)#
mtext('freqency', side=2, line=2.3, las=0)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 596, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
x[x < 900 & x > 800] <- x[x < 900 & x > 800] + 100#
t.test(x, mu=650)#
mean(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3.5, 1, 1), las=1, mgp=c(1.9, 0.7, 0))#
histPlot(x, xlab='housing expense', ylab='')#
mtext('freqency', side=2, line=2.3, las=0)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 596, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
x[x < 900 & x > 800] <- x[x < 900 & x > 800] + 100#
t.test(x, mu=650)#
mean(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3, 3.5, 1, 1), las=1, mgp=c(1.9, 0.7, 0))#
histPlot(x, xlab='housing expense (dollars)', ylab='')#
mtext('freqency', side=2, line=2.3, las=0)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 596, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
x[x < 900 & x > 800] <- x[x < 900 & x > 800] + 100#
t.test(x, mu=650)#
mean(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3.2, 3.5, 1, 1), las=1, mgp=c(1.9, 0.7, 0))#
histPlot(x, xlab='housing expense (dollars)', ylab='', col='#22558844')#
mtext('freqency', side=2, line=2.3, las=0)#
dev.off()
library(openintro)#
set.seed(2)#
x <- c(rnorm(65, 596, 100), exp(rnorm(10, log(500), 1.8)))#
x[x < 400] <- rnorm(sum(x < 400), 500, 50)#
x[x < 900 & x > 800] <- x[x < 900 & x > 800] + 100#
t.test(x, mu=650)#
mean(x)#
sd(x)#
length(x)#
#
pdf('communityCollegeClaimedHousingExpenseDistribution.pdf', 5, 3)#
par(mar=c(3.2, 3.5, 1, 1), las=1, mgp=c(1.9, 0.7, 0))#
histPlot(x, xlab='housing expense (dollars)', ylab='', col='#22558844')#
mtext('freqency', side=2, line=2.3, las=0)#
dev.off()
sd(x)/sqrt(75)
611.63 + c(-1,1)*1.96*15.34
